//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ToolsApp.EntityFramework
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ChamCong_teamdevEntities : DbContext
    {
        public ChamCong_teamdevEntities()
            : base("name=ChamCong_teamdevEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
        public virtual DbSet<AttendanceFace> AttendanceFaces { get; set; }
        public virtual DbSet<Conversation> Conversations { get; set; }
        public virtual DbSet<ConversationList> ConversationLists { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Errol> Errols { get; set; }
        public virtual DbSet<Help> Helps { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobDetail> JobDetails { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<Messenger> Messengers { get; set; }
        public virtual DbSet<notification> notifications { get; set; }
        public virtual DbSet<Page> Pages { get; set; }
        public virtual DbSet<PleaseTakeLeave> PleaseTakeLeaves { get; set; }
        public virtual DbSet<ProfileUser> ProfileUsers { get; set; }
        public virtual DbSet<Qr_Patrol> Qr_Patrol { get; set; }
        public virtual DbSet<ReportSalary> ReportSalaries { get; set; }
        public virtual DbSet<Resignation> Resignations { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User_Check_Patrol> User_Check_Patrol { get; set; }
        public virtual DbSet<User_Page> User_Page { get; set; }
        public virtual DbSet<UserJob> UserJobs { get; set; }
        public virtual DbSet<ReportSalariesTmp> ReportSalariesTmps { get; set; }
    
        public virtual ObjectResult<Sp_ExportExcelTimeKeeping_Result> Sp_ExportExcelTimeKeeping(Nullable<int> idDepartment, Nullable<int> month, string idJob)
        {
            var idDepartmentParameter = idDepartment.HasValue ?
                new ObjectParameter("idDepartment", idDepartment) :
                new ObjectParameter("idDepartment", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var idJobParameter = idJob != null ?
                new ObjectParameter("idJob", idJob) :
                new ObjectParameter("idJob", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ExportExcelTimeKeeping_Result>("Sp_ExportExcelTimeKeeping", idDepartmentParameter, monthParameter, idJobParameter);
        }
    
        public virtual ObjectResult<Sp_GetListReportSalaries_Result> Sp_GetListReportSalaries(Nullable<int> idDepartment)
        {
            var idDepartmentParameter = idDepartment.HasValue ?
                new ObjectParameter("idDepartment", idDepartment) :
                new ObjectParameter("idDepartment", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetListReportSalaries_Result>("Sp_GetListReportSalaries", idDepartmentParameter);
        }
    
        public virtual ObjectResult<Sp_GetNotification_Result> Sp_GetNotification(Nullable<int> idDepartment)
        {
            var idDepartmentParameter = idDepartment.HasValue ?
                new ObjectParameter("idDepartment", idDepartment) :
                new ObjectParameter("idDepartment", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetNotification_Result>("Sp_GetNotification", idDepartmentParameter);
        }
    
        public virtual ObjectResult<Sp_GetQRPatrol_Result> Sp_GetQRPatrol(Nullable<int> idDepartment)
        {
            var idDepartmentParameter = idDepartment.HasValue ?
                new ObjectParameter("idDepartment", idDepartment) :
                new ObjectParameter("idDepartment", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetQRPatrol_Result>("Sp_GetQRPatrol", idDepartmentParameter);
        }
    
        public virtual ObjectResult<Sp_LoadJobFromUserName_Result> Sp_LoadJobFromUserName(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_LoadJobFromUserName_Result>("Sp_LoadJobFromUserName", usernameParameter);
        }
    
        public virtual ObjectResult<Sp_LoadTakeLeave_Result> Sp_LoadTakeLeave(Nullable<int> idDepartment, string name)
        {
            var idDepartmentParameter = idDepartment.HasValue ?
                new ObjectParameter("idDepartment", idDepartment) :
                new ObjectParameter("idDepartment", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_LoadTakeLeave_Result>("Sp_LoadTakeLeave", idDepartmentParameter, nameParameter);
        }
    
        public virtual ObjectResult<Sp_LoadTimeKeeping_Result> Sp_LoadTimeKeeping(Nullable<int> idDepartment)
        {
            var idDepartmentParameter = idDepartment.HasValue ?
                new ObjectParameter("idDepartment", idDepartment) :
                new ObjectParameter("idDepartment", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_LoadTimeKeeping_Result>("Sp_LoadTimeKeeping", idDepartmentParameter);
        }
    
        public virtual ObjectResult<Sp_LoadUserCheckPatrol_Result> Sp_LoadUserCheckPatrol(Nullable<int> idDepartment, string name, string nameLocation)
        {
            var idDepartmentParameter = idDepartment.HasValue ?
                new ObjectParameter("idDepartment", idDepartment) :
                new ObjectParameter("idDepartment", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var nameLocationParameter = nameLocation != null ?
                new ObjectParameter("nameLocation", nameLocation) :
                new ObjectParameter("nameLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_LoadUserCheckPatrol_Result>("Sp_LoadUserCheckPatrol", idDepartmentParameter, nameParameter, nameLocationParameter);
        }
    
        public virtual int Sp_loadUserJob()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_loadUserJob");
        }
    
        public virtual ObjectResult<Sp_PrintTakeLeave_Result> Sp_PrintTakeLeave(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_PrintTakeLeave_Result>("Sp_PrintTakeLeave", idParameter);
        }
    
        public virtual ObjectResult<Sp_Report_Luong_Result> Sp_Report_Luong(Nullable<int> department, Nullable<System.DateTime> month)
        {
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Report_Luong_Result>("Sp_Report_Luong", departmentParameter, monthParameter);
        }
    
        public virtual ObjectResult<Sp_Report_time_user_Result> Sp_Report_time_user(Nullable<int> department, string username, Nullable<System.DateTime> month)
        {
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Report_time_user_Result>("Sp_Report_time_user", departmentParameter, usernameParameter, monthParameter);
        }
    
        public virtual ObjectResult<Sp_ReportTimeKeeping_Result> Sp_ReportTimeKeeping(Nullable<int> idDepartment, Nullable<int> month, string userName, string idJob)
        {
            var idDepartmentParameter = idDepartment.HasValue ?
                new ObjectParameter("idDepartment", idDepartment) :
                new ObjectParameter("idDepartment", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var idJobParameter = idJob != null ?
                new ObjectParameter("idJob", idJob) :
                new ObjectParameter("idJob", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ReportTimeKeeping_Result>("Sp_ReportTimeKeeping", idDepartmentParameter, monthParameter, userNameParameter, idJobParameter);
        }
    }
}
